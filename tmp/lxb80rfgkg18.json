{
  "report": {"id":1,"date":"03/03/2016","report_type":"EY Template","report_name":"Pentest","consultant_name":null,"consultant_phone":null,"consultant_title":null,"consultant_email":null,"contact_name":"","contact_phone":"","contact_title":"","contact_email":"","contact_city":"","contact_address":"","contact_state":"","contact_zip":"","full_company_name":"","short_company_name":"","company_website":"","owner":"administrator","authors":null,"user_defined_variables":null},
  "findings": [{"id":1,"report_id":1,"master_id":1,"finding_modified":null,"title":"SQL Injection","damage":10,"reproducability":10,"exploitability":10,"affected_users":10,"discoverability":10,"effort":"Quick","type":"Web Application","dread_total":50,"overview":"<paragraph>The OWASP guide [1] gives the following description for SQL Injection:</paragraph><paragraph>A SQL injection attack consists of insertion or &quot;injection&quot; of a SQL query via the input data from the client to the application. A successful SQL injection exploit can read sensitive data from the database, modify database data (Insert/Update/Delete), execute administration operations on the database (such as shutdown the DBMS), recover the content of a given file present on the DBMS file system and in some cases issue commands to the operating system. SQL injection attacks are a type of injection attack, in which SQL commands are injected into data-plane input in order to effect the execution of predefined SQL commands.</paragraph>","poc":"<paragraph></paragraph>","remediation":"<paragraph>The following is recommended to prevent SQL Injection:</paragraph><paragraph><bullet>Use of Prepared Statements (Parameterized Queries)</bullet></paragraph><paragraph><bullet>Use of Stored Procedures</bullet></paragraph><paragraph><bullet>Never trust user input, Escaping all User Supplied Input</bullet></paragraph>","notes":"","assessment_type":"External","references":"https://www.owasp.org/index.php/SQL_Injection","risk":4,"affected_hosts":"<paragraph></paragraph>","presentation_points":"","presentation_rem_points":"","av":"Local","ac":"High","au":"Multiple","c":"None","i":"None","a":"None","e":"Not Defined","rl":"Temporary Fix","rc":"Not Defined","cdp":"Low","td":"Medium","cr":"High","ir":"Not Defined","ar":"Medium","cvss_base":"8.3","cvss_impact":"10.0","cvss_exploitability":"6.4","cvss_temporal":"8.3","cvss_environmental":"8.3","cvss_modified_impact":"10.0","cvss_total":"8.3","ease":null},{"id":2,"report_id":1,"master_id":2,"finding_modified":null,"title":"Cross Site Scripting (XSS)","damage":8,"reproducability":10,"exploitability":8,"affected_users":10,"discoverability":10,"effort":"Involved","type":"Logging and Auditing","dread_total":46,"overview":"<paragraph>The OWASP guide [1] gives the following description for Cross-Site Scripting:</paragraph><paragraph>Cross-Site Scripting (XSS) attacks are a type of injection, in which malicious scripts are injected into otherwise benign and trusted web sites. XSS attacks occur when an attacker uses a web application to send malicious code, generally in the form of a browser side script, to a different end user. Flaws that allow these attacks to succeed are quite widespread and occur anywhere a web application uses input from a user within the output it generates without validating or encoding it.</paragraph><paragraph>An attacker can use XSS to send a malicious script to an unsuspecting user. The end user’s browser has no way to know that the script should not be trusted, and will execute the script. Because it thinks the script came from a trusted source, the malicious script can access any cookies, session tokens, or other sensitive information retained by the browser and used with that site. These scripts can even rewrite the content of the HTML page.</paragraph>","poc":"<paragraph></paragraph>","remediation":"<paragraph>The following is recommended to remediate XSS vulnerabilities:</paragraph><paragraph><bullet>Never trust user input</bullet></paragraph><paragraph><bullet>Never insert untrusted data except in allowed locations</bullet></paragraph><paragraph><bullet>HTML escape before inserting untrusted data into HTML element content</bullet></paragraph><paragraph><bullet>Use whitelists in place for Black lists for input filtering</bullet></paragraph>","notes":"","assessment_type":"External","references":"https://www.owasp.org/index.php/Cross-site_Scripting_%28XSS%29","risk":4,"affected_hosts":"<paragraph></paragraph>","presentation_points":"","presentation_rem_points":"","av":"Local","ac":"High","au":"Multiple","c":"None","i":"None","a":"None","e":"Not Defined","rl":"Not Defined","rc":"Unconfirmed","cdp":"Low-Medium","td":"Not Defined","cr":"High","ir":"High","ar":"Not Defined","cvss_base":"8.3","cvss_impact":"10.0","cvss_exploitability":"6.4","cvss_temporal":"8.3","cvss_environmental":"8.3","cvss_modified_impact":"10.0","cvss_total":"8.3","ease":null},{"id":3,"report_id":1,"master_id":3,"finding_modified":null,"title":"Direct Object References","damage":8,"reproducability":10,"exploitability":8,"affected_users":10,"discoverability":8,"effort":"LOW","type":"Web Application","dread_total":44,"overview":"<paragraph>The OWASP guide [1] gives the following description for Insecure Direct Object Reference:</paragraph><paragraph>Applications frequently use the actual name or key of an object when generating web pages. Applications do not always verify the user is authorized for the target object. This results in an insecure direct object reference flaw. Testers can easily manipulate parameter values to detect such flaws and code analysis quickly shows whether authorization is properly verified.</paragraph>","poc":"<paragraph></paragraph>","remediation":"<paragraph>Use per user or session indirect object references. This prevents attackers from directly targeting unauthorized resources. For example, instead of using the resource’s database key, a drop down list of six resources authorized for the current user could use the numbers 1 to 6 to indicate which value the user selected. The application has to map the per-user indirect reference back to the actual database key on the server. </paragraph><paragraph>Check access. Each use of a direct object reference from an untrusted source must include an access control check to ensure the user is authorized for the requested object.</paragraph>","notes":null,"assessment_type":null,"references":"https://www.owasp.org/index.php/Top_10_2010-A4-Insecure_Direct_Object_References","risk":4,"affected_hosts":null,"presentation_points":null,"presentation_rem_points":null,"av":null,"ac":null,"au":null,"c":null,"i":null,"a":null,"e":null,"rl":null,"rc":null,"cdp":null,"td":null,"cr":null,"ir":null,"ar":null,"cvss_base":null,"cvss_impact":null,"cvss_exploitability":null,"cvss_temporal":null,"cvss_environmental":null,"cvss_modified_impact":null,"cvss_total":"0","ease":null},{"id":9,"report_id":1,"master_id":9,"finding_modified":null,"title":"Path Traversal","damage":7,"reproducability":7,"exploitability":7,"affected_users":7,"discoverability":7,"effort":"MEDIUM","type":"Web Application","dread_total":35,"overview":"<paragraph>Quoting from [1], a Path Traversal attack aims to access files and directories that are stored outside the web root folder. By browsing the application, the attacker looks for absolute links to files stored on the web server. By manipulating variables that reference files with “dot-dot-slash (../)” sequences and its variations, it may be possible to access arbitrary files and directories stored on file system, including application source code, configuration and critical system files, limited by system operational access control. The attacker uses “../” sequences to move up to root directory, thus permitting navigation through the file system.</paragraph><paragraph>This attack can be executed with an external malicious code injected on the path, like the Resource Injection attack. To perform this attack it’s not necessary to use a specific tool; attackers typically use a spider/crawler to detect all URLs available.</paragraph><paragraph>This attack is also known as “dot-dot-slash”, “directory traversal”, “directory climbing” and “backtracking”.</paragraph>","poc":"<paragraph></paragraph>","remediation":"<paragraph></paragraph>","notes":null,"assessment_type":null,"references":"<paragraph>https://www.owasp.org/index.php/Path_Traversal</paragraph><paragraph>http://cwe.mitre.org/data/definitions/22.html</paragraph><paragraph>http://www.webappsec.org/projects/threat/classes/path_traversal.shtml</paragraph>","risk":3,"affected_hosts":null,"presentation_points":null,"presentation_rem_points":null,"av":null,"ac":null,"au":null,"c":null,"i":null,"a":null,"e":null,"rl":null,"rc":null,"cdp":null,"td":null,"cr":null,"ir":null,"ar":null,"cvss_base":null,"cvss_impact":null,"cvss_exploitability":null,"cvss_temporal":null,"cvss_environmental":null,"cvss_modified_impact":null,"cvss_total":"0","ease":null},{"id":17,"report_id":1,"master_id":17,"finding_modified":null,"title":"XML External Entity (XXE) Processing ","damage":10,"reproducability":10,"exploitability":10,"affected_users":10,"discoverability":10,"effort":"LOW","type":"Web Application","dread_total":50,"overview":"<paragraph>An XML External Entity attack is a type of attack against an application that parses XML input. This attack occurs when XML input containing a reference to an external entity is processed by a weakly configured XML parser. This attack may lead to the disclosure of confidential data, denial of service, port scanning from the perspective of the machine where the parser is located, and other system impacts.</paragraph>","poc":"<paragraph></paragraph>","remediation":"<paragraph></paragraph>","notes":null,"assessment_type":null,"references":"https://www.owasp.org/index.php/XML_External_Entity_(XXE)_Processing","risk":4,"affected_hosts":null,"presentation_points":null,"presentation_rem_points":null,"av":null,"ac":null,"au":null,"c":null,"i":null,"a":null,"e":null,"rl":null,"rc":null,"cdp":null,"td":null,"cr":null,"ir":null,"ar":null,"cvss_base":null,"cvss_impact":null,"cvss_exploitability":null,"cvss_temporal":null,"cvss_environmental":null,"cvss_modified_impact":null,"cvss_total":"0","ease":null}]
}